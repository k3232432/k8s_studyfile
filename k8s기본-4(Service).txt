Service
[(Service-1).PNG]파일 참조
pod는 자체 ip를 가지고 다른 pod와 통신할 수 있지만, 쉽게 사라지고 생성되는 특징때문에 직접통신 방식은 권장되지 않는다.

k8s는 pod와 직접통신하는 방법대신, 별도의 고정된 ip를 가진 서비스를 만들고 그 서비스를 통해 pod에 접근하는 방식이다.

Service 는 노출범위에 따라 ClusterIP, NodePort, LoadBalancer타입으로 나누어짐.



Service(ClusterIP)만들기
ClusterIP는 클러스터 내부에 새로운 ip를 할당하고 여러개의 pod를 선택하는 로드밸런서의 기능을 함.
서비스이름을 내부 도메인서버에 등록해서 pod간에 서비스 이름으로도 통신이 가능하다.
다중 컨테이너 부분에서 만들었던 counter을 이용해서 redis를 서비스로 실행해봄
==================counter-redis-svc.yml===============
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
spec:
  selector:
    matchLabels:
      app: counter
      tier: db
  template:
    metadata:
      labels:
        app: counter
        tier: db
    spec:
      containers:
        - name: redis
          image: redis
          ports:
            - containerPort: 6379
              protocol: TCP

---
apiVersion: v1
kind: Service
metadata:
  name: redis
spec:
  ports:
    - port: 6379
      protocol: TCP
  selector:
    app: counter
    tier: db
========================================
※하나의 ymal파일에 여러개의 리소스를 정의할때에는 "---"를 구분자로 사용
redis 생성
kubectl apply -f counter-redis-svc.yml
