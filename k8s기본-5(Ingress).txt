Ingress
하나의 클러스터에서 여러가지 서비스를 운영한다면 외부연결은 NodePort를 이용해야하는데
이때 NodePort를 사용하면 서비스개수 만큼 포트를 오픈해야함 귀찮고 번거로움.

- 사진[(Ingress-1).PNG]참고
사진은 서로다른 주소로 서로다른 서비스에 접근했을때인데, 이때 80번 포트와 443번 포트로
여러개의 서비스를 연결해야 하는데 이럴때 Ingress를 사용함.


- Ingress만들기
echo웹 애플리케이션을 버전별로 다른 도메인을 사용해서 생성
minikube ip로 테스트 클러스터의 노드 ip를 구하고, 도메인주소로 사용함
결과 ip는 172.23.75.222
v1.echo.172.23.75.222.sslip.io
v2.echo.172.23.75.222.sslip.io
가 됨
sslip을 사용한 이유는 별도의 작업없이 도메인주소를 사용하기 위함.

#minikube에 Ingress 활성화 하기
minikube addons enable ingress
#ingress 컨트롤러 확인
kubectl -n kube-system get pod
#설정이 잘 되었는지 확인
curl -I http://172.23.75.222/healthz

- echo 웹 애플리케이션 배포
Nginx Ingress Controller가 설치 완료되면 echo웹 에플리케이션을 배포해보자
v1, v2 2가지를 배포
Ingress Spec중 rules.host부분을 minikube ip즉 172.23.75.222로 변경해야함.
===========echo-v1-ingress.yml========
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: echo-v1
spec:
  rules:
    - host: v1.echo.172.23.75.222.sslip.io
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: echo-v1
                port:
                  number: 3000

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: echo-v1
spec:
  replicas: 3
  selector:
    matchLabels:
      app: echo
      tier: app
      version: v1
  template:
    metadata:
      labels:
        app: echo
        tier: app
        version: v1
    spec:
      containers:
        - name: echo
          image: ghcr.io/subicura/echo:v1
          livenessProbe:
            httpGet:
              path: /
              port: 3000

---
apiVersion: v1
kind: Service
metadata:
  name: echo-v1
spec:
  ports:
    - port: 3000
      protocol: TCP
  selector:
    app: echo
    tier: app
    version: v1
=====================================
============echo-v2-ingress.yml============
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: echo-v2
spec:
  rules:
    - host: v2.echo.172.23.75.222.sslip.io
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: echo-v2
                port:
                  number: 3000

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: echo-v2
spec:
  replicas: 3
  selector:
    matchLabels:
      app: echo
      tier: app
      version: v2
  template:
    metadata:
      labels:
        app: echo
        tier: app
        version: v2
    spec:
      containers:
        - name: echo
          image: ghcr.io/subicura/echo:v2
          livenessProbe:
            httpGet:
              path: /
              port: 3000

---
apiVersion: v1
kind: Service
metadata:
  name: echo-v2
spec:
  ports:
    - port: 3000
      protocol: TCP
  selector:
    app: echo
    tier: app
    version: v2
===============================
#서로다른 도메인을 가진 V1, V2 실행
kubectl apply -f echo-v1-ingress.yml,echo-v2-ingress.yml
#Ingress상태확인
kubectl get ingress || kubectl get ing
접속 테스트를 해봐야 함.
URL에 v1.echo.172.23.75.222.sslip.io과 v2.echo.172.23.75.222.sslip.io로 접속

- Ingress 생성 흐름[사진 (Ingress-2).PNG]파일 참조
1. Ingress Controller는 Ingress변화를 체크
2. Ingress Controller는 변경된 내용을 Nginx에 설정한 후, 프로세스 재시작함.
동작방식을 보면 Ingress설정을 단순히 Nginx설정으로 바뀌는걸 알 수 있음. 
단지 이 과정을 수동으로 하지 않고 Ingress Controller가 하는것 일 뿐임.
Ingress는 도메인, 경로만 연동하는게 아닌, timeout요청, maxsize요청 등 다양한 프록시 서버를
설정할 수 있음.

- 결론
Ingress을 사용하면 YAML설정으로 도메인, 경로 설정을 쉽게 할 수 있음.
기존방식은 도메인을 연결하려면 담당자에게 요청후, 설정파일 변경, 프로새스 재시작 순으로
수동으로 작업했지만 Ingress를 이용하면 그런 과정이 필요 없어짐.

- 실습
다음 조건을 만족하는 Ingress를 만드시오
키			값
Deployment 이름		nginx
Deployment Label		app:nginx
Deployment 복제수	3
Container이름		nginx
Container이미지		nginx:latest
Ingress도메인		nginx.[minikube ip].sslip.io

정답
================silsup8.yml==============
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: nginx
spec:
  rules:
    - host: nginx.172.23.75.222.sslip.io
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: nginx
                port:
                  number: 80

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx
spec:
  replicas: 3
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
        - name: nginx
          image: nginx:latest

---
apiVersion: v1
kind: Service
metadata:
  name: nginx
spec:
  ports:
    - port: 80
      protocol: TCP
  selector:
    app: nginx
==================================



